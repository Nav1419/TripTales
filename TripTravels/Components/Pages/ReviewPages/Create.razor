@page "/reviews/create"
@using Microsoft.EntityFrameworkCore
@using TripTravels.Domain
@inject IDbContextFactory<TripTravels.Data.TripTravelsContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Review</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Review" OnValidSubmit="AddReview" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="userid" class="form-label">UserId:</label> 
                <InputNumber id="userid" @bind-Value="Review.UserId" class="form-control" /> 
                <ValidationMessage For="() => Review.UserId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="destinationid" class="form-label">DestinationId:</label> 
                <InputNumber id="destinationid" @bind-Value="Review.DestinationId" class="form-control" /> 
                <ValidationMessage For="() => Review.DestinationId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="rating" class="form-label">Rating:</label> 
                <InputNumber id="rating" @bind-Value="Review.Rating" class="form-control" /> 
                <ValidationMessage For="() => Review.Rating" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="comment" class="form-label">Comment:</label> 
                <InputText id="comment" @bind-Value="Review.Comment" class="form-control" /> 
                <ValidationMessage For="() => Review.Comment" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="reviewdate" class="form-label">ReviewDate:</label> 
                <InputDate id="reviewdate" @bind-Value="Review.ReviewDate" class="form-control" /> 
                <ValidationMessage For="() => Review.ReviewDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="Review.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => Review.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dateupdated" class="form-label">DateUpdated:</label> 
                <InputDate id="dateupdated" @bind-Value="Review.DateUpdated" class="form-control" /> 
                <ValidationMessage For="() => Review.DateUpdated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="createdby" class="form-label">CreatedBy:</label> 
                <InputText id="createdby" @bind-Value="Review.CreatedBy" class="form-control" /> 
                <ValidationMessage For="() => Review.CreatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="updatedby" class="form-label">UpdatedBy:</label> 
                <InputText id="updatedby" @bind-Value="Review.UpdatedBy" class="form-control" /> 
                <ValidationMessage For="() => Review.UpdatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="isdeleted" class="form-label">IsDeleted:</label> 
                <InputCheckbox id="isdeleted" @bind-Value="Review.IsDeleted" class="form-check-input" /> 
                <ValidationMessage For="() => Review.IsDeleted" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/reviews">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Review Review { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddReview()
    {
        using var context = DbFactory.CreateDbContext();
        context.Review.Add(Review);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/reviews");
    }
}
