@page "/destinations/details"
@using Microsoft.EntityFrameworkCore
@using TripTravels.Domain
@inject IDbContextFactory<TripTravels.Data.TripTravelsContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Destination</h2>
    <hr />
    @if (destination is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@destination.Description</dd>
            <dt class="col-sm-2">City</dt>
            <dd class="col-sm-10">@destination.City</dd>
            <dt class="col-sm-2">Country</dt>
            <dd class="col-sm-10">@destination.Country</dd>
            <dt class="col-sm-2">ImageUrl</dt>
            <dd class="col-sm-10">@destination.ImageUrl</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@destination.DateCreated</dd>
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@destination.DateUpdated</dd>
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@destination.CreatedBy</dd>
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@destination.UpdatedBy</dd>
            <dt class="col-sm-2">IsDeleted</dt>
            <dd class="col-sm-10">@destination.IsDeleted</dd>
        </dl>
        <div>
            <a href="@($"/destinations/edit?id={destination.Id}")">Edit</a> |
            <a href="@($"/destinations")">Back to List</a>
        </div>
    }
</div>

@code {
    private Destination? destination;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        destination = await context.Destination.FirstOrDefaultAsync(m => m.Id == Id);

        if (destination is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
